{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://vscode-graphos/./src/utils.ts","webpack://vscode-graphos/./src/extension.ts","webpack://vscode-graphos/external node-commonjs \"child_process\"","webpack://vscode-graphos/external commonjs \"vscode\"","webpack://vscode-graphos/./src/serverProvider.ts","webpack://vscode-graphos/external node-commonjs \"fs\"","webpack://vscode-graphos/./src/taskProvider.ts","webpack://vscode-graphos/external node-commonjs \"path\"","webpack://vscode-graphos/webpack/bootstrap","webpack://vscode-graphos/webpack/startup"],"sourcesContent":["import * as cp from 'child_process';\nimport * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Execute a shell command and return the output\n * @param command The command to execute\n * @param captureOutput Whether to capture the output\n * @param workingDir Optional working directory\n * @returns The command output\n */\nexport function executeCommand(\n  command: string, \n  captureOutput: boolean = false, \n  workingDir?: string\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const cwd = workingDir || getUmbrellaRootPath() || getWorkspacePath();\n    \n    const options: cp.ExecOptions = {\n      cwd,\n      maxBuffer: 1024 * 1024 * 5 // 5MB buffer to handle large outputs\n    };\n    \n    console.log(`Executing command: ${command} in directory: ${cwd}`);\n    \n    if (captureOutput) {\n      cp.exec(command, options, (error, stdout, stderr) => {\n        if (error) {\n          console.error(`Command execution error: ${error.message}`);\n          console.error(`Command stderr: ${stderr}`);\n          reject(error);\n          return;\n        }\n        resolve(stdout.toString());\n      });\n    } else {\n      cp.exec(command, options, (error) => {\n        if (error) {\n          console.error(`Command execution error: ${error.message}`);\n          reject(error);\n          return;\n        }\n        resolve('');\n      });\n    }\n  });\n}\n\n/**\n * Get the root path of the workspace\n */\nexport function getWorkspacePath(): string | undefined {\n  const folders = vscode.workspace.workspaceFolders;\n  if (folders && folders.length > 0) {\n    return folders[0].uri.fsPath;\n  }\n  return undefined;\n}\n\n/**\n * Find the umbrella project root by looking for a mix.exs file\n * and apps directory together in the same directory\n */\nexport function getUmbrellaRootPath(): string | undefined {\n  const workspacePath = getWorkspacePath();\n  if (!workspacePath) return undefined;\n  \n  // Check if we're already at the umbrella root\n  if (isUmbrellaRoot(workspacePath)) {\n    return workspacePath;\n  }\n  \n  // Check for \"apps\" directory in case we're in a subdirectory\n  const appsPath = path.join(workspacePath, '..', 'apps');\n  const parentPath = path.join(workspacePath, '..');\n  \n  if (fs.existsSync(appsPath) && isUmbrellaRoot(parentPath)) {\n    return parentPath;\n  }\n  \n  // Try looking for the apps directory by walking up the tree\n  let currentPath = workspacePath;\n  const maxDepth = 5; // Don't go too far up\n  \n  for (let i = 0; i < maxDepth; i++) {\n    const parentPath = path.dirname(currentPath);\n    if (isUmbrellaRoot(parentPath)) {\n      return parentPath;\n    }\n    if (parentPath === currentPath) {\n      break; // We've reached the root\n    }\n    currentPath = parentPath;\n  }\n  \n  // If we can't find the umbrella root, at least try to find a directory with mix.exs\n  currentPath = workspacePath;\n  for (let i = 0; i < maxDepth; i++) {\n    if (fs.existsSync(path.join(currentPath, 'mix.exs'))) {\n      return currentPath;\n    }\n    const parentPath = path.dirname(currentPath);\n    if (parentPath === currentPath) {\n      break; // We've reached the root\n    }\n    currentPath = parentPath;\n  }\n  \n  return undefined;\n}\n\n/**\n * Check if a directory is an umbrella project root\n */\nfunction isUmbrellaRoot(dirPath: string): boolean {\n  return (\n    fs.existsSync(path.join(dirPath, 'mix.exs')) &&\n    fs.existsSync(path.join(dirPath, 'apps')) &&\n    fs.statSync(path.join(dirPath, 'apps')).isDirectory()\n  );\n}\n\n/**\n * Check if a command exists\n */\nexport async function commandExists(command: string): Promise<boolean> {\n  try {\n    await executeCommand(`which ${command}`, true);\n    return true;\n  } catch (error) {\n    return false;\n  }\n} ","import * as vscode from 'vscode';\nimport { ServerProvider } from './serverProvider';\nimport { TaskProvider } from './taskProvider';\nimport { executeCommand } from './utils';\nimport type { MixTask } from './taskProvider';\n\nexport async function activate(context: vscode.ExtensionContext) {\n  console.log('GraphOS extension is now active');\n\n  // Register the server and task providers\n  const serverProvider = new ServerProvider();\n  const taskProvider = new TaskProvider();\n\n  vscode.window.registerTreeDataProvider('graphos-sidebar', serverProvider);\n  vscode.window.registerTreeDataProvider('graphos-tasks', taskProvider);\n\n  // Create two main status bar items with dropdown functionality\n  let serverRunning = false;\n  \n  // MIX button\n  const mixButton = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\n  mixButton.text = \"$(beaker) mix\";\n  mixButton.tooltip = \"Mix Tasks\";\n  mixButton.command = \"graphos.showMixMenu\";\n  mixButton.color = new vscode.ThemeColor('statusBarItem.prominentForeground');\n  mixButton.backgroundColor = new vscode.ThemeColor('statusBarItem.prominentBackground');\n  mixButton.show();\n  \n  // MCP button with status indicator\n  const mcpButton = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 99);\n  mcpButton.text = \"$(broadcast) mcp\"; // Will update with status indicator\n  mcpButton.tooltip = \"Model Context Protocol\";\n  mcpButton.command = \"graphos.showMcpMenu\";\n  mcpButton.color = new vscode.ThemeColor('statusBarItem.prominentForeground');\n  mcpButton.backgroundColor = new vscode.ThemeColor('statusBarItem.prominentBackground');\n  mcpButton.show();\n  \n  // Add status bar items to context subscriptions\n  context.subscriptions.push(mixButton, mcpButton);\n\n  // Function to update MCP button with server status\n  const updateMcpButton = async () => {\n    serverRunning = await checkServerRunning();\n    mcpButton.text = serverRunning \n      ? \"$(broadcast) mcp $(debug-start)\" \n      : \"$(broadcast) mcp $(debug-stop)\";\n    mcpButton.tooltip = `Model Context Protocol (Server ${serverRunning ? 'Running' : 'Stopped'})`;\n  };\n\n  // Initial update of MCP button\n  await updateMcpButton();\n  \n  // Schedule regular updates (every 5 seconds)\n  const statusInterval = setInterval(async () => {\n    await updateMcpButton();\n  }, 5000);\n  \n  // Ensure interval is cleared on deactivation\n  context.subscriptions.push({ dispose: () => clearInterval(statusInterval) });\n\n  // Register our commands (incorporating all the tasks.json functionality)\n  context.subscriptions.push(\n    // Mix menu command\n    vscode.commands.registerCommand('graphos.showMixMenu', async () => {\n      const tasks = await taskProvider.getTasks();\n      const namespaces = new Map<string, MixTask[]>();\n      \n      // Group tasks by namespace\n      for (const task of tasks) {\n        const namespaceName = task.label.includes('.') ? task.label.split('.')[0] : 'other';\n        if (!namespaces.has(namespaceName)) {\n          namespaces.set(namespaceName, []);\n        }\n        namespaces.get(namespaceName)?.push(task);\n      }\n      \n      // Create menu items\n      const items: vscode.QuickPickItem[] = [];\n      \n      // First add common actions\n      items.push({\n        label: \"$(list-unordered) Task Menu\",\n        description: \"Open the task menu with all mix tasks\"\n      });\n      \n      items.push({ label: '$(dash) Namespaces', kind: vscode.QuickPickItemKind.Separator });\n      \n      // Add namespace items\n      for (const [namespace, namespaceTasks] of namespaces.entries()) {\n        items.push({\n          label: `$(symbol-namespace) ${namespace}`,\n          description: `${namespaceTasks.length} tasks`\n        });\n      }\n      \n      // Show quick pick\n      const selected = await vscode.window.showQuickPick(items, {\n        placeHolder: 'Select a Mix task or namespace'\n      });\n      \n      if (!selected) return;\n      \n      if (selected.label === \"$(list-unordered) Task Menu\") {\n        vscode.commands.executeCommand('graphos.showTaskMenu');\n      } else if (selected.label.startsWith('$(symbol-namespace)')) {\n        // Selected a namespace, show tasks in that namespace\n        const namespace = selected.label.replace('$(symbol-namespace) ', '');\n        const namespaceTasks = namespaces.get(namespace) || [];\n        \n        const taskItems = namespaceTasks.map(task => ({\n          label: `$(terminal-bash) ${task.label}`,\n          description: task.description\n        }));\n        \n        const selectedTask = await vscode.window.showQuickPick(taskItems, {\n          placeHolder: `Select a task from ${namespace}`\n        });\n        \n        if (selectedTask) {\n          const taskName = selectedTask.label.replace('$(terminal-bash) ', '');\n          vscode.commands.executeCommand('graphos.runTask', taskName);\n        }\n      }\n    }),\n    \n    // MCP menu command\n    vscode.commands.registerCommand('graphos.showMcpMenu', async () => {\n      const items: vscode.QuickPickItem[] = [];\n      \n      // Server control section\n      items.push({ label: '$(vm) Server Control', kind: vscode.QuickPickItemKind.Separator });\n      \n      if (serverRunning) {\n        items.push({\n          label: \"$(debug-stop) Stop Server\",\n          description: \"Stop the GraphOS server\"\n        });\n        items.push({\n          label: \"$(debug-restart) Restart Server\",\n          description: \"Restart the GraphOS server\"\n        });\n        items.push({\n          label: \"$(terminal) Join Server Session\",\n          description: \"Join the GraphOS server session\"\n        });\n      } else {\n        items.push({\n          label: \"$(debug-start) Start Server\",\n          description: \"Start the GraphOS server\"\n        });\n      }\n      \n      items.push({ label: '$(browser) Server Tools', kind: vscode.QuickPickItemKind.Separator });\n      \n      // MCP tools\n      items.push({\n        label: \"$(inspect) Inspector\",\n        description: \"Open the MCP Inspector\"\n      });\n      items.push({\n        label: \"$(bug) Debug Mode\",\n        description: \"Open the MCP Debug mode\"\n      });\n      items.push({\n        label: \"$(broadcast) SSE\",\n        description: \"Open the SSE endpoint\"\n      });\n      \n      // Test tools\n      items.push({ label: '$(beaker) Test Tools', kind: vscode.QuickPickItemKind.Separator });\n      \n      items.push({\n        label: \"$(beaker) Test Client\",\n        description: \"Run the MCP test client\"\n      });\n      items.push({\n        label: \"$(symbol-enum) Test Types\",\n        description: \"Run MCP type parity tests\"\n      });\n      items.push({\n        label: \"$(server) Test Server\",\n        description: \"Run MCP test server\"\n      });\n      items.push({\n        label: \"$(globe) Test Endpoint\",\n        description: \"Run MCP test endpoint\"\n      });\n      \n      // Show quick pick\n      const selected = await vscode.window.showQuickPick(items, {\n        placeHolder: 'Select MCP action'\n      });\n      \n      if (!selected) return;\n      \n      // Handle selection\n      switch (selected.label) {\n        case \"$(debug-stop) Stop Server\":\n          vscode.commands.executeCommand('graphos.stopServer');\n          break;\n        case \"$(debug-restart) Restart Server\":\n          vscode.commands.executeCommand('graphos.restartServer');\n          break;\n        case \"$(terminal) Join Server Session\":\n          vscode.commands.executeCommand('graphos.joinServer');\n          break;\n        case \"$(debug-start) Start Server\":\n          vscode.commands.executeCommand('graphos.startServer');\n          break;\n        case \"$(inspect) Inspector\":\n          vscode.commands.executeCommand('graphos.openInspector');\n          break;\n        case \"$(bug) Debug Mode\":\n          vscode.commands.executeCommand('graphos.openDebug');\n          break;\n        case \"$(broadcast) SSE\":\n          vscode.commands.executeCommand('graphos.openSSE');\n          break;\n        case \"$(beaker) Test Client\":\n          vscode.commands.executeCommand('graphos.runTestClient');\n          break;\n        case \"$(symbol-enum) Test Types\":\n          vscode.commands.executeCommand('graphos.runTestTypes');\n          break;\n        case \"$(server) Test Server\":\n          vscode.commands.executeCommand('graphos.runTestServer');\n          break;\n        case \"$(globe) Test Endpoint\":\n          vscode.commands.executeCommand('graphos.runTestEndpoint');\n          break;\n      }\n    }),\n    \n    // Server management commands\n    vscode.commands.registerCommand('graphos.startServer', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Server');\n      terminal.sendText('mix dev.server start');\n      terminal.show();\n      \n      // Open browser after a delay to ensure server has started\n      setTimeout(() => {\n        executeCommand('open http://localhost:4000');\n      }, 3000);\n      \n      serverProvider.refresh();\n      await updateMcpButton();\n    }),\n\n    vscode.commands.registerCommand('graphos.stopServer', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Server');\n      terminal.sendText('mix dev.server stop');\n      terminal.show();\n      serverProvider.refresh();\n      await updateMcpButton();\n    }),\n\n    vscode.commands.registerCommand('graphos.restartServer', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Server');\n      terminal.sendText('mix dev.server restart');\n      terminal.show();\n      \n      // Open browser after a delay to ensure server has restarted\n      setTimeout(() => {\n        executeCommand('open http://localhost:4000');\n      }, 3000);\n      \n      serverProvider.refresh();\n      await updateMcpButton();\n    }),\n\n    vscode.commands.registerCommand('graphos.joinServer', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Server Session');\n      terminal.sendText('mix dev.server join');\n      terminal.show();\n    }),\n\n    vscode.commands.registerCommand('graphos.checkServerStatus', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Server Status');\n      terminal.sendText('mix dev.server status');\n      terminal.show();\n      serverProvider.refresh();\n      await updateMcpButton();\n    }),\n\n    vscode.commands.registerCommand('graphos.openBrowser', async () => {\n      executeCommand('open http://localhost:4000');\n    }),\n\n    // MCP tool commands\n    vscode.commands.registerCommand('graphos.openInspector', async () => {\n      const isRunning = await checkServerRunning();\n      \n      if (isRunning) {\n        vscode.window.showInformationMessage('Using existing server session...');\n        executeCommand('open http://localhost:4000/inspector');\n      } else {\n        const terminal = vscode.window.createTerminal('GraphOS Inspector');\n        terminal.sendText('mix mcp.inspect');\n        terminal.show();\n        \n        // Open browser after a delay to ensure inspector has started\n        setTimeout(() => {\n          executeCommand('open http://localhost:4000/inspector');\n        }, 3000);\n      }\n      \n      serverProvider.refresh();\n      await updateMcpButton();\n    }),\n\n    vscode.commands.registerCommand('graphos.openDebug', async () => {\n      const isRunning = await checkServerRunning();\n      \n      if (isRunning) {\n        vscode.window.showInformationMessage('Using existing server session...');\n        executeCommand('open http://localhost:4000/debug/api');\n      } else {\n        const terminal = vscode.window.createTerminal('GraphOS Debug');\n        terminal.sendText('mix mcp.debug');\n        terminal.show();\n        \n        // Open browser after a delay to ensure debug has started\n        setTimeout(() => {\n          executeCommand('open http://localhost:4000/debug/api');\n        }, 3000);\n      }\n      \n      serverProvider.refresh();\n      await updateMcpButton();\n    }),\n\n    vscode.commands.registerCommand('graphos.openSSE', async () => {\n      const isRunning = await checkServerRunning();\n      \n      if (isRunning) {\n        vscode.window.showInformationMessage('Using existing server session...');\n        executeCommand('open http://localhost:4000/sse');\n      } else {\n        const terminal = vscode.window.createTerminal('GraphOS SSE');\n        terminal.sendText('mix mcp.sse');\n        terminal.show();\n        \n        // Open browser after a delay to ensure SSE has started\n        setTimeout(() => {\n          executeCommand('open http://localhost:4000/sse');\n        }, 3000);\n      }\n      \n      serverProvider.refresh();\n      await updateMcpButton();\n    }),\n\n    // Test commands\n    vscode.commands.registerCommand('graphos.runTestClient', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Test Client');\n      terminal.sendText('mix mcp.test_client');\n      terminal.show();\n    }),\n\n    vscode.commands.registerCommand('graphos.runTestTypes', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Test Types');\n      terminal.sendText('mix mcp.test_types');\n      terminal.show();\n    }),\n\n    vscode.commands.registerCommand('graphos.runTestServer', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Test Server');\n      terminal.sendText('mix mcp.test_server');\n      terminal.show();\n    }),\n\n    vscode.commands.registerCommand('graphos.runTestEndpoint', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Test Endpoint');\n      terminal.sendText('mix mcp.test_endpoint');\n      terminal.show();\n    }),\n\n    // Task menu commands\n    vscode.commands.registerCommand('graphos.showTaskMenu', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Task Menu');\n      terminal.sendText('mix dev.menu');\n      terminal.show();\n    }),\n\n    vscode.commands.registerCommand('graphos.showMCPTasks', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS MCP Tasks');\n      terminal.sendText('mix dev.menu --filter=mcp');\n      terminal.show();\n    }),\n\n    vscode.commands.registerCommand('graphos.showDevTasks', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Dev Tasks');\n      terminal.sendText('mix dev.menu --filter=dev');\n      terminal.show();\n    }),\n\n    vscode.commands.registerCommand('graphos.listTasks', async () => {\n      const terminal = vscode.window.createTerminal('GraphOS Task List');\n      terminal.sendText('mix dev.tasks');\n      terminal.show();\n    }),\n\n    // General task command\n    vscode.commands.registerCommand('graphos.runTask', async (taskName?: string) => {\n      if (!taskName) {\n        // If no task is provided, show a quick pick to select a task\n        const tasks = await taskProvider.getTasks();\n        \n        // Define the interface for the quick pick items\n        interface QuickPickItem {\n          label: string;\n          description: string;\n        }\n        \n        const selectedTask = await vscode.window.showQuickPick<QuickPickItem>(\n          tasks.map((task: MixTask) => ({ label: task.label, description: task.description })),\n          { placeHolder: 'Select a mix task to run' }\n        );\n\n        if (selectedTask) {\n          taskName = selectedTask.label;\n        } else {\n          return;\n        }\n      }\n\n      const terminal = vscode.window.createTerminal(`GraphOS Task: ${taskName}`);\n      terminal.sendText(`mix ${taskName}`);\n      terminal.show();\n    }),\n\n    vscode.commands.registerCommand('graphos.refreshTasks', () => {\n      taskProvider.refresh();\n    })\n  );\n\n  // Initial refresh\n  serverProvider.refresh();\n  taskProvider.refresh();\n}\n\nasync function checkServerRunning(): Promise<boolean> {\n  try {\n    // Try using the dev.server status command\n    const result = await executeCommand('mix dev.server status', true);\n    return result.includes('Phoenix server is running');\n  } catch (error) {\n    // If the command fails, try a more generic approach\n    try {\n      // Check for a running Phoenix server by checking for a PID file or process\n      const processResult = await executeCommand('ps aux | grep \"[p]hoenix.*server\" || echo \"No server found\"', true);\n      return !processResult.includes('No server found');\n    } catch (secondError) {\n      console.error('Failed to check server status:', secondError);\n      return false;\n    }\n  }\n}\n\nexport function deactivate() {\n  // Clean up resources\n} ","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\nimport { executeCommand } from './utils';\n\nexport class ServerItem extends vscode.TreeItem {\n  constructor(\n    public readonly label: string,\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState,\n    public readonly command?: vscode.Command\n  ) {\n    super(label, collapsibleState);\n  }\n}\n\nexport class ServerProvider implements vscode.TreeDataProvider<ServerItem> {\n  private _onDidChangeTreeData: vscode.EventEmitter<ServerItem | undefined | null | void> = new vscode.EventEmitter<ServerItem | undefined | null | void>();\n  readonly onDidChangeTreeData: vscode.Event<ServerItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n  private _serverRunning: boolean = false;\n\n  refresh(): void {\n    this.checkServerStatus().then(running => {\n      this._serverRunning = running;\n      this._onDidChangeTreeData.fire();\n    });\n  }\n\n  getTreeItem(element: ServerItem): vscode.TreeItem {\n    return element;\n  }\n\n  async getChildren(element?: ServerItem): Promise<ServerItem[]> {\n    if (element) {\n      return [];\n    }\n\n    const items: ServerItem[] = [];\n\n    // Server status\n    const statusItem = new ServerItem(\n      `Server: ${this._serverRunning ? 'Running' : 'Stopped'}`,\n      vscode.TreeItemCollapsibleState.None\n    );\n    \n    statusItem.iconPath = this._serverRunning \n      ? new vscode.ThemeIcon('debug-start', new vscode.ThemeColor('terminal.ansiGreen'))\n      : new vscode.ThemeIcon('debug-stop', new vscode.ThemeColor('terminal.ansiRed'));\n    \n    items.push(statusItem);\n\n    // Server actions\n    if (this._serverRunning) {\n      items.push(\n        new ServerItem('Stop Server', vscode.TreeItemCollapsibleState.None, {\n          command: 'graphos.stopServer',\n          title: 'Stop Server'\n        }),\n        new ServerItem('Restart Server', vscode.TreeItemCollapsibleState.None, {\n          command: 'graphos.restartServer',\n          title: 'Restart Server'\n        }),\n        new ServerItem('Join Server Session', vscode.TreeItemCollapsibleState.None, {\n          command: 'graphos.joinServer',\n          title: 'Join Server Session'\n        })\n      );\n    } else {\n      items.push(\n        new ServerItem('Start Server', vscode.TreeItemCollapsibleState.None, {\n          command: 'graphos.startServer',\n          title: 'Start Server'\n        })\n      );\n    }\n\n    // Browser actions\n    items.push(\n      new ServerItem('Open in Browser', vscode.TreeItemCollapsibleState.None, {\n        command: 'graphos.openBrowser',\n        title: 'Open in Browser'\n      })\n    );\n\n    // MCP actions\n    items.push(\n      new ServerItem('MCP', vscode.TreeItemCollapsibleState.Collapsed)\n    );\n\n    return items;\n  }\n\n  async getChildren2(element?: ServerItem): Promise<ServerItem[]> {\n    if (!element) {\n      return this.getChildren();\n    }\n\n    // Handle MCP submenu\n    if (element.label === 'MCP') {\n      return [\n        new ServerItem('Inspector', vscode.TreeItemCollapsibleState.None, {\n          command: 'graphos.openInspector',\n          title: 'Open Inspector'\n        }),\n        new ServerItem('Debug Mode', vscode.TreeItemCollapsibleState.None, {\n          command: 'graphos.openDebug',\n          title: 'Open Debug Mode'\n        }),\n        new ServerItem('SSE', vscode.TreeItemCollapsibleState.None, {\n          command: 'graphos.openSSE',\n          title: 'Open SSE'\n        })\n      ];\n    }\n\n    return [];\n  }\n\n  private async checkServerStatus(): Promise<boolean> {\n    try {\n      const result = await executeCommand('mix dev.server status', true);\n      return result.includes('Phoenix server is running');\n    } catch (error) {\n      return false;\n    }\n  }\n} ","module.exports = require(\"fs\");","import * as vscode from 'vscode';\nimport { executeCommand, getWorkspacePath, getUmbrellaRootPath } from './utils';\nimport * as path from 'path';\n\nexport interface MixTask {\n  label: string;\n  description: string;\n}\n\nexport class TaskItem extends vscode.TreeItem {\n  constructor(\n    public readonly label: string,\n    public readonly description: string,\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState,\n    public readonly command?: vscode.Command\n  ) {\n    super(label, collapsibleState);\n    this.tooltip = description;\n    this.description = description;\n    \n    // Set contextValue for tasks (this allows menus to target specific item types)\n    if (collapsibleState === vscode.TreeItemCollapsibleState.None) {\n      this.contextValue = 'taskItem';\n    } else {\n      this.contextValue = 'namespaceItem';\n    }\n  }\n}\n\nexport class TaskProvider implements vscode.TreeDataProvider<TaskItem> {\n  private _onDidChangeTreeData: vscode.EventEmitter<TaskItem | undefined | null | void> = new vscode.EventEmitter<TaskItem | undefined | null | void>();\n  readonly onDidChangeTreeData: vscode.Event<TaskItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n  private _tasks: MixTask[] = [];\n  private _namespaces: Map<string, MixTask[]> = new Map();\n\n  refresh(): void {\n    this.loadTasks().then(() => {\n      this._onDidChangeTreeData.fire();\n    });\n  }\n\n  getTreeItem(element: TaskItem): vscode.TreeItem {\n    return element;\n  }\n\n  async getChildren(element?: TaskItem): Promise<TaskItem[]> {\n    if (!element) {\n      // Root level - show namespaces\n      return this.getNamespaces();\n    } else {\n      // Namespace level - show tasks in this namespace\n      return this.getTasksInNamespace(element.label);\n    }\n  }\n\n  async getTasks(): Promise<MixTask[]> {\n    if (this._tasks.length === 0) {\n      await this.loadTasks();\n    }\n    return this._tasks;\n  }\n\n  private async loadTasks(): Promise<void> {\n    try {\n      const umbrellaRoot = getUmbrellaRootPath();\n      const workspacePath = getWorkspacePath();\n      \n      if (!umbrellaRoot && !workspacePath) {\n        vscode.window.showWarningMessage('No Elixir project found. Please open a folder containing a mix.exs file.');\n        return;\n      }\n      \n      let output = '';\n      let useDevTasks = true;\n      \n      try {\n        // First try using the custom dev.tasks task\n        output = await executeCommand('mix dev.tasks', true);\n      } catch (error) {\n        console.log('dev.tasks not available, falling back to mix help');\n        useDevTasks = false;\n        \n        // Fallback to standard mix help\n        try {\n          output = await executeCommand('mix help', true);\n        } catch (helpError) {\n          vscode.window.showErrorMessage(`Failed to load Mix tasks: ${helpError}`);\n          return;\n        }\n      }\n      \n      const lines = output.split('\\n');\n\n      // Clear existing tasks\n      this._tasks = [];\n      this._namespaces = new Map();\n\n      let currentNamespace = '';\n      \n      if (useDevTasks) {\n        // Parse output from dev.tasks\n        for (const line of lines) {\n          // Check if it's a namespace line (e.g. \"phoenix\")\n          if (line.trim() && !line.startsWith(' ') && !line.startsWith('\\t') && !line.includes('Available Mix Tasks:')) {\n            currentNamespace = line.trim();\n          } \n          // Check if it's a task line (starts with whitespace and has a task name)\n          else if (line.trim() && (line.startsWith(' ') || line.startsWith('\\t'))) {\n            const match = line.trim().match(/^([a-z0-9._:]+)\\s+(.*)/);\n            if (match) {\n              const taskName = match[1];\n              const description = match[2] || '';\n              \n              const task: MixTask = {\n                label: taskName,\n                description: description\n              };\n              \n              this._tasks.push(task);\n              \n              // Add to namespace map\n              if (!this._namespaces.has(currentNamespace)) {\n                this._namespaces.set(currentNamespace, []);\n              }\n              this._namespaces.get(currentNamespace)?.push(task);\n            }\n          }\n        }\n      } else {\n        // Parse output from mix help\n        let inTaskSection = false;\n        \n        for (const line of lines) {\n          // Check for the start of the mix tasks section\n          if (line.includes('mix') && line.includes('# ')) {\n            inTaskSection = true;\n            continue;\n          }\n          \n          if (!inTaskSection) continue;\n          \n          // Skip empty lines and section headers\n          if (!line.trim() || line.endsWith(':')) continue;\n          \n          // Parse task lines\n          const match = line.trim().match(/^([a-z0-9._:]+)\\s+#\\s+(.*)/);\n          if (match) {\n            const taskName = match[1];\n            const description = match[2] || '';\n            \n            // Determine namespace from task name\n            const namespace = taskName.includes('.') \n              ? taskName.split('.')[0] \n              : 'mix';\n              \n            const task: MixTask = {\n              label: taskName,\n              description: description\n            };\n            \n            this._tasks.push(task);\n            \n            // Add to namespace map\n            if (!this._namespaces.has(namespace)) {\n              this._namespaces.set(namespace, []);\n            }\n            this._namespaces.get(namespace)?.push(task);\n          }\n        }\n        \n        // If we couldn't find any tasks in the standard output, add a basic set\n        if (this._tasks.length === 0) {\n          this.addBasicTasks();\n        }\n      }\n      \n      // If we have no namespaces, create a default one\n      if (this._namespaces.size === 0) {\n        this._namespaces.set('mix', this._tasks);\n      }\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to load Mix tasks: ${error}`);\n      // Add basic tasks as a fallback\n      this.addBasicTasks();\n    }\n  }\n  \n  private addBasicTasks(): void {\n    // Add some basic mix tasks that are commonly available\n    const basicTasks = [\n      { label: 'compile', description: 'Compiles source files' },\n      { label: 'deps.get', description: 'Gets all out of date dependencies' },\n      { label: 'deps.update', description: 'Updates the given dependencies' },\n      { label: 'test', description: 'Runs a project\\'s tests' },\n      { label: 'help', description: 'Lists all available tasks' },\n      { label: 'clean', description: 'Deletes generated application files' }\n    ];\n    \n    this._tasks = basicTasks;\n    this._namespaces.set('mix', basicTasks);\n  }\n\n  private async getNamespaces(): Promise<TaskItem[]> {\n    if (this._namespaces.size === 0) {\n      await this.loadTasks();\n    }\n    \n    const namespaceItems: TaskItem[] = [];\n    \n    for (const [namespace, tasks] of this._namespaces.entries()) {\n      const item = new TaskItem(\n        namespace,\n        `${tasks.length} tasks`,\n        vscode.TreeItemCollapsibleState.Collapsed\n      );\n      \n      item.iconPath = new vscode.ThemeIcon('symbol-namespace');\n      namespaceItems.push(item);\n    }\n    \n    return namespaceItems.sort((a, b) => a.label.localeCompare(b.label));\n  }\n\n  private async getTasksInNamespace(namespace: string): Promise<TaskItem[]> {\n    const tasks = this._namespaces.get(namespace) || [];\n    \n    return tasks.map(task => {\n      const item = new TaskItem(\n        task.label,\n        task.description,\n        vscode.TreeItemCollapsibleState.None,\n        {\n          command: 'graphos.runTask',\n          title: 'Run Task',\n          arguments: [task.label]\n        }\n      );\n      \n      item.iconPath = new vscode.ThemeIcon('terminal-bash');\n      return item;\n    }).sort((a, b) => a.label.localeCompare(b.label));\n  }\n} ","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["async","command","executeCommand","error","captureOutput","workingDir","Promise","resolve","reject","cwd","getUmbrellaRootPath","getWorkspacePath","options","maxBuffer","console","log","cp","exec","stdout","stderr","message","toString","folders","vscode","workspace","workspaceFolders","length","uri","fsPath","workspacePath","isUmbrellaRoot","appsPath","path","join","parentPath","fs","existsSync","currentPath","i","dirname","dirPath","statSync","isDirectory","context","serverProvider","ServerProvider","taskProvider","TaskProvider","window","registerTreeDataProvider","serverRunning","mixButton","createStatusBarItem","StatusBarAlignment","Left","text","tooltip","color","ThemeColor","backgroundColor","show","mcpButton","subscriptions","push","updateMcpButton","checkServerRunning","statusInterval","setInterval","dispose","clearInterval","commands","registerCommand","tasks","getTasks","namespaces","Map","task","namespaceName","label","includes","split","has","set","get","items","description","kind","QuickPickItemKind","Separator","namespace","namespaceTasks","entries","selected","showQuickPick","placeHolder","startsWith","replace","taskItems","map","selectedTask","taskName","terminal","createTerminal","sendText","setTimeout","refresh","showInformationMessage","secondError","module","exports","require","ServerItem","TreeItem","constructor","collapsibleState","super","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","this","event","_serverRunning","checkServerStatus","then","running","fire","getTreeItem","element","getChildren","statusItem","TreeItemCollapsibleState","None","iconPath","ThemeIcon","title","Collapsed","getChildren2","TaskItem","contextValue","_tasks","_namespaces","loadTasks","getTasksInNamespace","getNamespaces","umbrellaRoot","showWarningMessage","output","useDevTasks","helpError","showErrorMessage","lines","currentNamespace","line","trim","match","inTaskSection","endsWith","addBasicTasks","size","basicTasks","namespaceItems","item","sort","a","b","localeCompare","arguments","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}